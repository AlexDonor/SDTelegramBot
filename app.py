"""
–ê–≤—Ç–æ—Ä: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –û–¥–∏–Ω—Ü–æ–≤
e-mail: kos5172@yandex.ru
Github: https://github.com/odintsovkos
–≠—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî —á–∞—Å—Ç—å SDTelegramBot.

SDTelegramBot ‚Äî —Å–≤–æ–±–æ–¥–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –µ–µ –∏/–∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –µ–µ –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ GNU –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∞ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –§–æ–Ω–¥–æ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è; –ª–∏–±–æ –≤–µ—Ä—Å–∏–∏ 3 –ª–∏—Ü–µ–Ω–∑–∏–∏, –ª–∏–±–æ (–ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É) –ª—é–±–æ–π –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.

SDTelegramBot —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –Ω–∞–¥–µ–∂–¥–µ, —á—Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–π, –Ω–æ –ë–ï–ó–û –í–°–Ø–ö–ò–• –ì–ê–†–ê–ù–¢–ò–ô; –¥–∞–∂–µ –±–µ–∑ –Ω–µ—è–≤–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¢–û–í–ê–†–ù–û–ì–û –í–ò–î–ê –∏–ª–∏ –ü–†–ò–ì–û–î–ù–û–°–¢–ò –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –¶–ï–õ–ï–ô. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. –≤ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ GNU.

–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ GNU –≤–º–µ—Å—Ç–µ —Å —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, —Å–º. <https://www.gnu.org/licenses/>.
"""


import asyncio
import logging
from aiogram import executor
import time
from settings.bot_config import is_wait_sd_launch, time_the_next_check_s, launch_sd_at_bot_started
from loader import dp
import middlewares, handlers
from utils.db_services import db_service
from utils.db_services.db_service import admins_and_users_initialization_in_db
from utils.misc_func import is_sd_launched, check_sd_path, start_sd_process
from utils.notifier import users_and_admins_notify
from utils.set_bot_commands import set_default_commands


async def on_startup(dispatcher):
    await db_service.db_create_table()
    await asyncio.sleep(2)
    await admins_and_users_initialization_in_db()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    await set_default_commands(dispatcher)

    # –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø—Ä–æ –∑–∞–ø—É—Å–∫
    await users_and_admins_notify(dispatcher, msg="üì¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")


if __name__ == '__main__':
    start_time = time.time()

    if is_sd_launched():
        executor.start_polling(dp, on_startup=on_startup)

    elif launch_sd_at_bot_started and check_sd_path():
        start_sd_process()
        logging.info("–ù–∞—á–∏–Ω–∞—é –∑–∞–ø—É—Å–∫ SD...")

        while True:
            if is_sd_launched():
                current_time = time.time()
                logging.info(f"SD –∑–∞–ø—É—â–µ–Ω–∞ - {int(current_time - start_time)}s.")

                executor.start_polling(dp, on_startup=on_startup)
                break
            time.sleep(time_the_next_check_s)

    elif is_wait_sd_launch:
        count = 1

        while True:
            if is_sd_launched():
                current_time = time.time()
                logging.info(f"SD –∑–∞–ø—É—â–µ–Ω–∞ - {int(current_time - start_time)}s.")

                executor.start_polling(dp, on_startup=on_startup)
                break
            logging.warning(f"LAUNCH ATTEMPT {count}, STABLE DIFFUSION NOT LAUNCHED!")
            count += 1
            time.sleep(time_the_next_check_s)

    elif not is_wait_sd_launch:
        logging.warning("SD –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")
